name: FREE Production Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Create empty SARIF file if none exists
        if: hashFiles('trivy-results.sarif') == ''
        run: |
          echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"tool": {"driver": {"name": "Trivy", "version": "0.0.0"}}, "results": []}]}' > trivy-results.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          upload: true

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('apps/frontend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./apps/frontend
        run: npm install

      - name: Run linting
        working-directory: ./apps/frontend
        run: npm run lint --if-present

      - name: Run tests
        working-directory: ./apps/frontend
        run: npm test -- --coverage --watchAll=false --passWithNoTests

      - name: Build application
        working-directory: ./apps/frontend
        run: npm run build

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests for auth-service
        working-directory: ./apps/auth-service
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Run tests for task-service
        working-directory: ./apps/task-service
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Run tests for notification-service
        working-directory: ./apps/notification-service
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Run Go security check for auth-service
        working-directory: ./apps/auth-service
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run Go security check for task-service
        working-directory: ./apps/task-service
        run: |
          govulncheck ./...

      - name: Run Go security check for notification-service
        working-directory: ./apps/notification-service
        run: |
          govulncheck ./...

  # Build and Push Docker Images
  build-and-push:
    needs: [security-scan, frontend-test, backend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push auth-service
        uses: docker/build-push-action@v5
        with:
          context: ./apps/auth-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-auth:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push task-service
        uses: docker/build-push-action@v5
        with:
          context: ./apps/task-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-task:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push notification-service
        uses: docker/build-push-action@v5
        with:
          context: ./apps/notification-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-notification:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Railway (Production)
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "RAILWAY_TOKEN secret is not set. Skipping Railway deployment."
            exit 0
          fi
          railway login --token $RAILWAY_TOKEN
          
          # Deploy auth service
          cd apps/auth-service
          cp ../../infrastructure/railway/auth-service.toml railway.toml
          railway up --service auth-service
          
          # Deploy task service
          cd ../task-service
          cp ../../infrastructure/railway/task-service.toml railway.toml
          railway up --service task-service
          
          # Deploy notification service
          cd ../notification-service
          cp ../../infrastructure/railway/notification-service.toml railway.toml
          railway up --service notification-service
          
          # Deploy frontend
          cd ../frontend
          cp ../../infrastructure/railway/frontend.toml railway.toml
          railway up --service frontend

      - name: Run health checks
        run: |
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Health check script will be created
          ./scripts/health-check.sh

  # Performance Testing
  performance-test:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run K6 performance tests
        run: |
          docker run --rm -v $PWD/monitoring/k6:/scripts grafana/k6 run /scripts/load-test.js
